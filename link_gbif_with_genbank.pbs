#!/bin/bash
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=28
#SBATCH -t 01:00:00
#SBATCH --job-name="pipeline_phylogatr"
#SBATCH --account=PAS1604

set -xe

export OUTPUT_DIR=/fs/scratch/PAS1604/genbank

export GENBANK_DIR=/fs/project/PAS1604/genbank
export GBIF_PATH=/fs/project/PAS1604/gbif/0147211-200613084148143.filtered.txt
export GBIF_PATH_EXPANDED=/fs/project/PAS1604/gbif/0147211-200613084148143.filtered.txt.expanded

cd $SLURM_SUBMIT_DIR

# Steps
# 1. given original gbif occurrences tsv, expand on accessions column so there is 1 accession per row

module load pcp
module load ruby

function expand_gbif_occurrences {
    if [[ -f $GBIF_PATH_EXPANDED ]]; then
        echo "Using expanded GBIF file at $GBIF_PATH_EXPANDED"
        cp $GBIF_PATH_EXPANDED $TMPDIR/gbif_occurrences.csv.sorted
    else
        bin/rake pipeline:expand_gbif_occurrences_on_accession GBIF=$GBIF_PATH GBIF_OUT=$GBIF_PATH_EXPANDED
    fi
}

function link_occurrence_and_genes {
    export GBIF_PATH_EXPANDED=$TMPDIR/gbif_occurrences.csv.sorted

    # takes 20m - a lot of time lost in bin/rake setup - could switch this to bin/db or add a bin/pipeline thor script
    for i in $GENBANK_DIR/gb{inv,mam,pln,pri,rod,vrt}*seq
    do
        echo "OUTPUT_DIR=$TMPDIR GENBANK_PATH=$i bin/rake pipeline:link_gbif_with_genbank"
    done | srun parallel-command-processor

    # FIXME: parallelizing tasks doesn't work with multitask but may with https://github.com/grosser/parallel_tests
    # 38m on 40 items (so it really isn't doing parallelism (just using threads)
    # (time GBIF_PATH_EXPANDED=$TMPDIR/gbif_occurrences.csv.sorted OUTPUT_DIR=$TMPDIR bin/rake -m pipeline:link_gbif_with_genbank)
}

function collect_files {
    cat $TMPDIR/*.genes.tsv.occurrences > $TMPDIR/gbif_occurrences_final.tsv
    cat $TMPDIR/*.genes.tsv > $TMPDIR/genes.tsv
}

function create_genes_directory {
    mkdir $TMPDIR/genes
    cat $TMPDIR/genes.tsv | ruby genes.rb $TMPDIR/genes
    cd $TMPDIR
    tar czf genes.tar.gz genes
}

function copy_results_to_output_dir {
    cp genes.tar.gz $OUTPUT_DIR
    cp genes.tsv $OUTPUT_DIR/genes.tsv
    cp $TMPDIR/gbif_occurrences_final.tsv $OUTPUT_DIR/gbif_occurrences_final.tsv
}

time expand_gbif_occurrences
time link_occurrence_and_genes
time collect_files
time create_genes_directory
time copy_results_to_output_dir
